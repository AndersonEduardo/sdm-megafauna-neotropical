cat('[STATUS] Tempo da iteração:',
difftime(point_time_end, point_time_start, unit='secs'),
'segundos \n\n')
}
cat('[STATUS] Execução finalizada.')
total_time_end = Sys.time()
cat('[STATUS] Tempo total:',
as.numeric(difftime(total_time_end, total_time_start, unit='secs')),
'segundos.\n')
return(xy_df)
}
# pf = readOGR('./test_files/rs') # poligono dos feragmentos rondonia
# pf = readOGR('./paisagem nova/floresta_SC/floresta_SC.shp')  # sistema cantareira completo
# pf = raster::crop(
#   pf,
#   c(extent(pf)[1], c(extent(pf)[1]+10000, extent(pf)[3], extent(pf)[4]))
#   ) # sistema cantareira MENOR
pf = readOGR('./paisagem nova/Floresta_Sistema_Cantareira')  # NOVA (com matriz e floresta)
#################
pf = gBuffer(pf, byid = TRUE, width=0)  # PARA CORRIGIR INTERSECTIONS
#################
pf@data$id = NULL
names(pf) = 'layer'
habitat = 'Floresta' #0
matrix = 'Matriz' #1
max_dist = 50  #50 #1000 # 500 #[40,50,60]
folder_path = './temp'
window_size = 10000 #[10000 - verificar algoritmo] #0.02 #5000 #0.02 #1000 #0.01 #for the "moving window"
restoration_size = 0.00001 #1 #0.004 #for the IIC
n = 10 #500 #1000 #500
# xy = spsample(x=as(extent(pf), "SpatialPolygons"), n=n, type='regular', pretty=TRUE)
xy = spsample(x=pf[pf$layer == matrix,], n=n, type='regular', pretty=TRUE)
xy_df = matrix_mapper(
xy = xy,
landscape = pf, #[pf$layer==habitat, ],
folder_path = folder_path,
window_size = window_size,
restoration_size = restoration_size,
max_dist = max_dist,
habitat = habitat,
matrix = matrix,
moving_window = FALSE, #TRUE,
plot = FALSE
)
### teste de tamanho de buffer
plot(pf)
plot(xy[1], add=T, cex=5, col='red')
plot(gBuffer(xy[1], width = 10000), col='red', add=T)
plot(gBuffer(xy[1], width = 20000), col='red', add=T)
### teste de tamanho de buffer
plot(pf[pf$layer=='Floresta',])
plot(xy[1], add=T, cex=5, col='red')
plot(gBuffer(xy[1], width = 20000), border='red', add=T)
matrix_mapper = function(xy, landscape, folder_path, window_size,
restoration_size, max_dist, habitat=1,
matrix=0, moving_window=FALSE, plot=FALSE){
cat('\n[STATUS] Inicializando... ')
total_time_start = Sys.time()
# metric = NA
xy_df = as.data.frame(xy)
xy_df$metric = NA
cat('pronto.\n')
for (i in 1:length(xy)){
point_time_start = Sys.time()
if (moving_window == TRUE){
cat('[STATUS] Computando geometria da janela deslizante... ')
start = Sys.time()
window_geometry = gBuffer(xy[i], width=window_size)
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
if (plot == TRUE){
cat('[STATUS] Executando plot... ')
start = Sys.time()
plot(landscape)
plot(buffer_geometry, add=TRUE)
plot(xy[i], add=TRUE)
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
}
cat('[STATUS] Recortando paisagem para a geometria da janela... ')
start = Sys.time()
croped_area = raster::crop(
landscape[landscape$layer==habitat, ],
window_geometry
)
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
if (is.null(croped_area)){
next
}
cat('[STATUS] Ajustando área recortada... ')
start = Sys.time()
croped_area = sp::disaggregate(croped_area)
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
}else{
croped_area = landscape[landscape$layer==habitat, ]
cat('[STATUS] Executando plot... ')
start = Sys.time()
if (plot == TRUE){
plot(landscape)
plot(xy[i], add=TRUE)
}
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
}
cat('[STATUS] Simulando implantação de área de habitat... ')
start = Sys.time()
focal_area = add_points(xy[i], croped_area, width=restoration_size)
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
cat('[STATUS] Realizando alguns ajustes... ')
start = Sys.time()
focal_area = sp::disaggregate(focal_area)
focal_area = as(focal_area, "SpatialPolygonsDataFrame")
names(focal_area@data) = 'layer'
focal_area@data$layer = habitat
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
cat('[STATUS] Computando métrica... ')
start = Sys.time()
metric = tryCatch(
eval_solution(
solution_polygon = focal_area,
folder_path = folder_path,
max_dist = max_dist,
habitat = habitat
), error=function(e){NA}
)
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
cat('[STATUS] Registrando métrica computada...')
xy_df[i,'metric'] = metric
cat('pronto.\n')
write.csv(xy_df, file='./matrixmapper.csv')
cat('[STATUS] Finalizado ponto', i, ': metrica', metric, '\n')
point_time_end = Sys.time()
cat('[STATUS] Tempo da iteração:',
difftime(point_time_end, point_time_start, unit='secs'),
'segundos \n\n')
}
cat('[STATUS] Execução finalizada.')
total_time_end = Sys.time()
cat('[STATUS] Tempo total:',
as.numeric(difftime(total_time_end, total_time_start, unit='secs')),
'segundos.\n')
return(xy_df)
}
habitat = 'Floresta' #0
matrix = 'Matriz' #1
max_dist = 50  #50 #1000 # 500 #[40,50,60]
folder_path = './temp'
window_size = 20000 #10000 #[10000 - verificar algoritmo] #0.02 #5000 #0.02 #1000 #0.01 #for the "moving window"
restoration_size = 0.00001 #1 #0.004 #for the IIC
n = 10 #500 #1000 #500
# xy = spsample(x=as(extent(pf), "SpatialPolygons"), n=n, type='regular', pretty=TRUE)
xy = spsample(x=pf[pf$layer == matrix,], n=n, type='regular', pretty=TRUE)
xy_df = matrix_mapper(
xy = xy,
landscape = pf, #[pf$layer==habitat, ],
folder_path = folder_path,
window_size = window_size,
restoration_size = restoration_size,
max_dist = max_dist,
habitat = habitat,
matrix = matrix,
moving_window = TRUE, #TRUE,
plot = FALSE
)
cls
pwd
!pwd
getwd()
library(oecd)
?oecd::matrix_mapper()
# libraries
library(rgdal)
library(raster)
library(lconnect)
library(rgeos)
library(RColorBrewer)
# functions
normalize_vector_values = function(x){
return(
(x - min(x, na.rm=TRUE)) / (max(x, na.rm=TRUE) - min(x, na.rm=TRUE))
)
}
eval_solution = function(solution_polygon, folder_path, max_dist, habitat, metric='IIC'){
writeOGR(solution_polygon, folder_path, 'solution_polygon',
driver='ESRI Shapefile', overwrite_layer=TRUE, delete_dsn=TRUE)
landscape = upload_land(file.path(folder_path, 'solution_polygon.shp'),
bound_path = NULL,
habitat = habitat,
max_dist = max_dist)
metric = con_metric(landscape, metric=metric)
return(metric)
}
get_solutions = function(solution_list, temp_folder, max_dist, habitat=1){
for (i in 1:length(solution_list)){
solution_list[[i]][[1]]$layer = habitat
m_i = eval_solution(solution_list[[i]][[1]], temp_folder, max_dist, habitat)
solution_list[[i]][[2]]$metric = m_i
#plot(solution_list[[i]], main=paste('IIC =', m_i))
}
output = c()
for (i in 1:length(solution_list)){
output = append(output, solution_list[[i]][[2]])
}
output = bind(output)
return(output)
}
search_by_id = function(o, x){
for (i in 1:length(o@polygons)){
p_i = o@polygons[[i]]
if (i == p_i@ID){
return(p_i)
}
}
}
print_ids = function(o){
for (i in 1:length(o@polygons)){
print(o@polygons[[i]]@ID)
}
}
add_points = function(xy, f, width){
b = gBuffer(xy, width=width)
o = bind(f, b)
o = aggregate(o)
return(o)
}
matrix_mapper = function(xy, landscape, folder_path, window_size,
restoration_size, max_dist, habitat=1,
matrix=0, moving_window=FALSE, plot=FALSE){
cat('\n[STATUS] Inicializando... ')
total_time_start = Sys.time()
# metric = NA
xy_df = as.data.frame(xy)
xy_df$metric = NA
cat('pronto.\n')
for (i in 1:length(xy)){
point_time_start = Sys.time()
if (moving_window == TRUE){
cat('[STATUS] Computando geometria da janela deslizante... ')
start = Sys.time()
window_geometry = gBuffer(xy[i], width=window_size)
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
if (plot == TRUE){
cat('[STATUS] Executando plot... ')
start = Sys.time()
plot(landscape)
plot(buffer_geometry, add=TRUE)
plot(xy[i], add=TRUE)
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
}
cat('[STATUS] Recortando paisagem para a geometria da janela... ')
start = Sys.time()
croped_area = raster::crop(
landscape[landscape$layer==habitat, ],
window_geometry
)
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
if (is.null(croped_area)){
next
}
cat('[STATUS] Ajustando área recortada... ')
start = Sys.time()
croped_area = sp::disaggregate(croped_area)
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
}else{
croped_area = landscape[landscape$layer==habitat, ]
cat('[STATUS] Executando plot... ')
start = Sys.time()
if (plot == TRUE){
plot(landscape)
plot(xy[i], add=TRUE)
}
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
}
cat('[STATUS] Simulando implantação de área de habitat... ')
start = Sys.time()
focal_area = add_points(xy[i], croped_area, width=restoration_size)
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
cat('[STATUS] Realizando alguns ajustes... ')
start = Sys.time()
focal_area = sp::disaggregate(focal_area)
focal_area = as(focal_area, "SpatialPolygonsDataFrame")
names(focal_area@data) = 'layer'
focal_area@data$layer = habitat
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
cat('[STATUS] Computando métrica... ')
start = Sys.time()
metric = tryCatch(
eval_solution(
solution_polygon = focal_area,
folder_path = folder_path,
max_dist = max_dist,
habitat = habitat
), error=function(e){NA}
)
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
cat('[STATUS] Registrando métrica computada...')
xy_df[i,'metric'] = metric
cat('pronto.\n')
write.csv(xy_df, file='./matrixmapper.csv')
cat('[STATUS] Finalizado ponto', i, ': metrica', metric, '\n')
point_time_end = Sys.time()
cat('[STATUS] Tempo da iteração:',
difftime(point_time_end, point_time_start, unit='secs'),
'segundos \n\n')
}
cat('[STATUS] Execução finalizada.')
total_time_end = Sys.time()
cat('[STATUS] Tempo total:',
as.numeric(difftime(total_time_end, total_time_start, unit='secs')),
'segundos.\n')
return(xy_df)
}
# pf = readOGR('./test_files/rs') # poligono dos feragmentos rondonia
# pf = readOGR('./paisagem nova/floresta_SC/floresta_SC.shp')  # sistema cantareira completo
# pf = raster::crop(
#   pf,
#   c(extent(pf)[1], c(extent(pf)[1]+10000, extent(pf)[3], extent(pf)[4]))
#   ) # sistema cantareira MENOR
pf = readOGR('./paisagem nova/Floresta_Sistema_Cantareira')  # NOVA (com matriz e floresta)
#################
pf = gBuffer(pf, byid = TRUE, width=0)  # PARA CORRIGIR INTERSECTIONS
#################
pf@data$id = NULL
names(pf) = 'layer'
### teste de tamanho de buffer
plot(pf[pf$layer=='Floresta',])
plot(xy[1], add=T, cex=1.5, col='red')
plot(gBuffer(xy[1], width = 20000), border='red', add=T)
plot(gBuffer(xy[1], width = 10000), border='red', add=T)
setwd("~/")
View(matrix_mapper)
library(rgdal)
library(raster)
# file_path = 'C:/Users/ACT/Documents/mapa MG/31mu2500g'
diretorio_municipios = 'C:/Users/ACT/Documents/mapa MG/BR_Municipios_2020'
diretorio_estado = 'C:/Users/ACT/Documents/mapa MG/BR_UF_2020'
diretorio_rodovias = 'C:/Users/ACT/Documents/mapa MG/rodovias'
nomes_municipios = c('São Sebastião da Bela Vista',
'Santa Rita do Sapucaí',
'Piranguinho',
'Cachoeira de Minas',
'Conceição dos Ouros',
'Paraisópolis',
'Brazópolis',
'Sapucaí-Mirim',
'Gonçalves',
'Olegário Maciel',
'Consolação')
nomes_municipios = c('São Sebastião da Bela Vista',
'Santa Rita do Sapucaí',
'Piranguinho',
'Cachoeira de Minas',
'Conceição dos Ouros',
'Paraisópolis',
'Brazópolis',
'Sapucaí-Mirim',
'Gonçalves',
'Olegário Maciel',
'Consolação')
rodovias_brasil = readOGR(
dsn=diretorio_rodovias,
layer='Rodovias',
use_iconv=TRUE,
encoding="UTF-8"
)
brasil_municipios = readOGR(
dsn=diretorio_municipios,
layer='BR_Municipios_2020', #'31mu2500g',
use_iconv=TRUE,
encoding="UTF-8"
)
brasil_estados = readOGR(
dsn=diretorio_estado,
layer='BR_UF_2020',
use_iconv=TRUE,
encoding="UTF-8"
)
mg_contorno = brasil_estados[brasil_estados$SIGLA_UF == 'MG', ]
geometria_municipios = brasil_municipios[brasil_municipios$NM_MUN %in% nomes_municipios, ]
rodovias_mg = rodovias_brasil[(rodovias_brasil$sg_uf=='MG') & (rodovias_brasil$nm_tipo_tr =='Eixo Principal'), ]
brasil_municipios
brasil_municipios$NM_MUN
'con' %in% 'consolação'
brasil_municipios['Consolação' $in$ brasil_municipios$NM_MUN, ]
brasil_municipios['Consolação' %in% brasil_municipios$NM_MUN, ]
brasil_municipios = readOGR(
dsn=diretorio_municipios,
layer='BR_Municipios_2020', #'31mu2500g',
use_iconv=TRUE,
encoding="UTF-8"
)
plot(geometria_municipios, add=T, col='blue')
# plot para MG
plot(mg_contorno, col='lightgray')
plot(geometria_municipios, add=T, col='blue')
plot(area, xlab='Longitude', ylab='Latitude', cex.lab=1)
# plot ára os municipios (imagem principal)
area = extent(geometria_municipios)
area@xmin = area@xmin - 0.1
area@xmax = area@xmax + 0.1
area@ymin = area@ymin - 0.05
area@ymax = area@ymax + 0.05
plot(area, xlab='Longitude', ylab='Latitude', cex.lab=1)
plot(brasil_municipios[brasil_municipios$SIGLA_UF == 'MG', ], border='grey', add=TRUE)
plot(mg_contorno, lwd=2, add=TRUE)
plot(geometria_municipios, lwd=2, col='lightblue', add=TRUE)
plot(rodovias_mg, col='darkblue', lwd=2, add=TRUE)
points(rbind(c(-45.58238615467513, -22.323504866999)), cex=1.5, pch=17, col='darkred')
grid()
plot(area, xlab='Longitude', ylab='Latitude', cex.lab=1, add=TRUE)
numObs <- dim(geometria_municipios@data)[1]
mylist <- c(1:numObs)
for (item in mylist) {
text(
coordinates(geometria_municipios)[item, ][1],
coordinates(geometria_municipios)[item, ][2],
geometria_municipios$NM_MUN[item],
cex=1, font=2
)
}
# plot para MG
plot(mg_contorno, col='lightgray')
plot(geometria_municipios, add=T, col='blue')
library(rgdal)
library(raster)
# file_path = 'C:/Users/ACT/Documents/mapa MG/31mu2500g'
diretorio_municipios = 'C:/Users/ACT/Documents/mapa MG/BR_Municipios_2020'
diretorio_estado = 'C:/Users/ACT/Documents/mapa MG/BR_UF_2020'
diretorio_rodovias = 'C:/Users/ACT/Documents/mapa MG/rodovias'
nomes_municipios = c('São Sebastião da Bela Vista',
'Santa Rita do Sapucaí',
'Piranguinho',
'Cachoeira de Minas',
'Conceição dos Ouros',
'Paraisópolis',
'Brazópolis',
'Sapucaí-Mirim',
'Gonçalves',
'Olegário Maciel',
'Consolação')
rodovias_brasil = readOGR(
dsn=diretorio_rodovias,
layer='Rodovias',
use_iconv=TRUE,
encoding="UTF-8"
)
brasil_municipios = readOGR(
dsn=diretorio_municipios,
layer='BR_Municipios_2020', #'31mu2500g',
use_iconv=TRUE,
encoding="UTF-8"
)
brasil_estados = readOGR(
dsn=diretorio_estado,
layer='BR_UF_2020',
use_iconv=TRUE,
encoding="UTF-8"
)
mg_contorno = brasil_estados[brasil_estados$SIGLA_UF == 'MG', ]
geometria_municipios = brasil_municipios[brasil_municipios$NM_MUN %in% nomes_municipios, ]
rodovias_mg = rodovias_brasil[(rodovias_brasil$sg_uf=='MG') & (rodovias_brasil$nm_tipo_tr =='Eixo Principal'), ]
# plot para MG
plot(mg_contorno, col='lightgray')
plot(geometria_municipios, add=T, col='blue')
library(sensitivity)
library(ENMeval)
library(dismo)
y <- scan()
y
y <- scan()
y <- scan()
y
y[1]
x <- scan(what = "character")
x
texto <- readLines(n = 1)
texto
texto <- readLines(n = 1)
texto
texto <- readLines(n = 1)
texto
fn.ex <- function() {
cat("Digite o nome do time de futebol de sua preferência (em letras minúsculas)\n")
time <- readLines(n = 1)
if (time == "atletico-pr")
cat("BOA ESCOLHA!!!\n")
else cat("Ihh, tá mal de escolha...\n")
return(invisible())
}
fn.ex
fn.ex()
fn.ex()
fn.ex()
fn.ex()
fn.ex()
cls
boxplot
setwd("C:/Users/ACT/git/sdm-megafauna-neotropical/utils")
setwd("C:/Users/ACT/git/sdm-megafauna-neotropical")
